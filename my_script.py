{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aaec0e46-d63a-4d8b-9b0f-a91b46913e22",
   "metadata": {},
   "source": [
    "# Step 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "81ff5b37-cc2c-49df-bbc0-8b93fa9c9819",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ✅ Change temp directory for current session\n",
    "new_temp = r\"E:\\new python temp\"\n",
    "os.makedirs(new_temp, exist_ok=True)\n",
    "os.environ[\"TMP\"] = new_temp\n",
    "os.environ[\"TEMP\"] = new_temp\n",
    "tempfile.tempdir = new_temp\n",
    "print(\"✅ Temp directory set to:\", tempfile.gettempdir())\n",
    "\n",
    "\n",
    "import re\n",
    "import pandas as pd\n",
    "import requests\n",
    "import pandas as pd\n",
    "import base64\n",
    "import time\n",
    "from pandas import json_normalize\n",
    "\n",
    "url = \"https://rattanindia.freshdesk.com/api/v2/agents/\"\n",
    "\n",
    "# Decode Base64 auth\n",
    "encoded_key = \"UGdLbHowcDAwNW1uRGZuZVBKZ0U6eA==\"\n",
    "decoded = base64.b64decode(encoded_key).decode(\"utf-8\")\n",
    "api_key = decoded.split(\":\")[0]\n",
    "password = \"x\"\n",
    "\n",
    "all_data = []\n",
    "page = 1\n",
    "\n",
    "while True:\n",
    "    print(f\"📄 Fetching page {page} ...\")\n",
    "    response = requests.get(f\"{url}?page={page}\", auth=(api_key, password))\n",
    "    \n",
    "    if response.status_code != 200:\n",
    "        print(\"❌ Error:\", response.status_code, response.text)\n",
    "        break\n",
    "    \n",
    "    data = response.json()\n",
    "    if not data:  # No more pages\n",
    "        print(\"✅ All pages fetched.\")\n",
    "        break\n",
    "    \n",
    "    all_data.extend(data)  # Add this page’s data\n",
    "    \n",
    "    page += 1\n",
    "    time.sleep(3)  # wait 3 seconds before next call\n",
    "\n",
    "# Flatten JSON\n",
    "if all_data:\n",
    "    df = json_normalize(all_data, sep='.')\n",
    "    df.to_excel(\"freshdesk_agents_all_pages.xlsx\", index=False)\n",
    "    display(df.head())\n",
    "    print(f\"✅ Data saved with {len(all_data)} agents, across {page-1} pages\")\n",
    "else:\n",
    "    print(\"❌ No data found\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d80edf8f-b463-48b1-af79-e7ee815c4e3f",
   "metadata": {},
   "source": [
    "# Step 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23f1400a-b1c0-4f3b-9f3d-d3e9ca15368c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ✅ Change temp directory for current session\n",
    "new_temp = r\"E:\\new python temp\"\n",
    "os.makedirs(new_temp, exist_ok=True)\n",
    "os.environ[\"TMP\"] = new_temp\n",
    "os.environ[\"TEMP\"] = new_temp\n",
    "tempfile.tempdir = new_temp\n",
    "print(\"✅ Temp directory set to:\", tempfile.gettempdir())\n",
    "\n",
    "\n",
    "# Pick only the required columns\n",
    "selected_columns = [\"last_active_at\", \"deactivated\", \"contact.name\", \"contact.time_zone\", \"contact.email\"]\n",
    "df_filtered = df[selected_columns]\n",
    "\n",
    "# Check what types are inside last_active_at\n",
    "print(\"Column type before conversion:\", df_filtered[\"last_active_at\"].dtype)\n",
    "\n",
    "# Convert everything to datetime (strict conversion, will raise error if something is bad)\n",
    "df_filtered[\"last_active_at\"] = pd.to_datetime(df_filtered[\"last_active_at\"], utc=True)\n",
    "\n",
    "# Extract only the date part\n",
    "df_filtered[\"last_active_at\"] = df_filtered[\"last_active_at\"].dt.strftime(\"%d-%m-%Y\")\n",
    "\n",
    "\n",
    "# ✅ Filter only agents where deactivated == False\n",
    "df_filtered = df_filtered[df_filtered[\"deactivated\"] == False]\n",
    "\n",
    "\n",
    "# ✅ Define extra emails to include\n",
    "extra_emails = [\n",
    "    \"kwickautomobilellp.dwarka@revoltmotors.com\",\n",
    "    \"rc.kantinagar@revoltcoco.com\",\n",
    "    \"rc.gujranwala@revoltcoco.com\"\n",
    "]\n",
    "\n",
    "# ✅ Filter: (emails containing 'dealer') OR (emails in extra_emails)\n",
    "df_filtered = df_filtered[\n",
    "    df_filtered[\"contact.email\"].str.contains(\"dealer\", case=False, na=False) |\n",
    "    df_filtered[\"contact.email\"].isin(extra_emails)\n",
    "]\n",
    "\n",
    "## ✅ Create Groups column: only exact \"REVOLT HUB\" match\n",
    "df[\"Groups\"] = df[\"contact.name\"].apply(\n",
    "    lambda x: \"REVOLT HUB\" if isinstance(x, str) and x.strip().upper() == \"REVOLT HUB\" else \"\"\n",
    ")\n",
    "\n",
    "# Now merge with df_filtered\n",
    "df_merged = df_filtered.merge(\n",
    "    df[[\"contact.email\", \"Groups\"]],\n",
    "    on=\"contact.email\",\n",
    "    how=\"left\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "471fd763-e607-4829-8a48-12303f570832",
   "metadata": {},
   "source": [
    "# Step 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a0633a4-c49a-4b26-9993-b4c2d2f255ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ✅ Change temp directory for current session\n",
    "new_temp = r\"E:\\new python temp\"\n",
    "os.makedirs(new_temp, exist_ok=True)\n",
    "os.environ[\"TMP\"] = new_temp\n",
    "os.environ[\"TEMP\"] = new_temp\n",
    "tempfile.tempdir = new_temp\n",
    "print(\"✅ Temp directory set to:\", tempfile.gettempdir())\n",
    "\n",
    "\n",
    "import re\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "\n",
    "def assign_group(name):\n",
    "    if not isinstance(name, str):\n",
    "        return \"\"\n",
    "    \n",
    "    n = name.strip().upper()\n",
    "\n",
    "    # ✅ Hardcoded overrides\n",
    "    overrides = {\n",
    "        \"NBK- INC\": \"REVOLT HUB NAVA VADAJ AHMEDABAD\",\n",
    "        \"AMRITAMOTORS VARANASI\": \"REVOLT HUB VARANASI\",\n",
    "        \"ANURON ENTERPRISES\": \"REVOLT HUB SB ROAD\",\n",
    "        \"CHAPRA HUB\": \"REVOLT HUB CHAPRA\",\n",
    "        \"CHOUDHARYELECTRICVEHILE.BHADRA\": \"REVOLT HUB BHADRA\",\n",
    "        \"INFINITYEBIKES ANAND\": \"REVOLT HUB ANAND\",\n",
    "        \"JUPITERWHEELSPVT NAJAFGARH\": \"REVOLT HUB NAJAFGARH\",\n",
    "        \"REVOLT KANTI NAGAR WORKSHOP\": \"REVOLT KANTI NAGAR WORKSHOP\",\n",
    "        \"REVOLT WORKSHOP GUJRANWALA TOWN\": \"REVOLT HUB GUJRANWALA TOWN and REVOLT WORKSHOP GUJRANWALA TOWN\",\n",
    "        \"SATYAJIT DESAI\": \"REVOLT HUB KOLHAPUR\",\n",
    "        \"SHREE RAM GREEN MOTORS VADODARA\": \"REVOLT HUB VADODARA\",\n",
    "        \"SHRI RAM AND A K AUTOMOBILE\": \"REVOLT HUB KATNI\",\n",
    "        \"TANISHKAUTOMOBILES REVOLT\": \"REVOLT HUB CHANDIGARH\",\n",
    "        \"||NBK- Inc|\" : \"REVOLT HUB NAVA VADAJ AHMEDABAD\"\n",
    "    }\n",
    "\n",
    "    # Check overrides first\n",
    "    if n in overrides:\n",
    "        return overrides[n]\n",
    "\n",
    "    # Case 1: Already \"REVOLT HUB ...\"\n",
    "    if n.startswith(\"REVOLT HUB\"):\n",
    "        parts = n.split()\n",
    "        if len(parts) >= 3:  # REVOLT + HUB + CITY\n",
    "            return f\"REVOLT HUB {parts[2]}\"\n",
    "        return n\n",
    "\n",
    "    # Case 2: \"HUB ...\" → make it \"REVOLT HUB <city>\"\n",
    "    match = re.search(r\"\\bHUB\\s+(\\w+)\", n)  # only first word after HUB\n",
    "    if match:\n",
    "        city = match.group(1).strip()\n",
    "        return f\"REVOLT HUB {city}\"\n",
    "\n",
    "    return \"\"\n",
    "\n",
    "\n",
    "# ✅ Apply directly to df (your full dataframe)\n",
    "df[\"Groups\"] = df[\"contact.name\"].apply(assign_group)\n",
    "\n",
    "# ✅ Merge with filtered dataframe\n",
    "df_merged = df_filtered.merge(\n",
    "    df[[\"contact.email\", \"Groups\"]],\n",
    "    on=\"contact.email\",\n",
    "    how=\"left\"\n",
    ")\n",
    "\n",
    "# ✅ Add today's date in filename\n",
    "today = datetime.now().strftime(\"%d-%m-%Y\")\n",
    "output_path = fr\"E:\\Fresh Desk and SR Reports\\dump\\Dealer Login Report - {today}.xlsx\"\n",
    "\n",
    "df_merged.to_excel(output_path, index=False)\n",
    "\n",
    "print(f\"✅ File saved at: {output_path}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acd04032-bc2b-402d-aa18-6719f45f8f37",
   "metadata": {},
   "source": [
    "# Step 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20fff930-58c7-4861-8fff-68c50b5a032e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ✅ Change temp directory for current session\n",
    "new_temp = r\"E:\\new python temp\"\n",
    "os.makedirs(new_temp, exist_ok=True)\n",
    "os.environ[\"TMP\"] = new_temp\n",
    "os.environ[\"TEMP\"] = new_temp\n",
    "tempfile.tempdir = new_temp\n",
    "print(\"✅ Temp directory set to:\", tempfile.gettempdir())\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from datetime import datetime, date\n",
    "\n",
    "# --- Input paths ---\n",
    "today = datetime.now().strftime(\"%d-%m-%Y\")\n",
    "output_path = fr\"E:\\Fresh Desk and SR Reports\\dump\\Dealer Login Report - {today}.xlsx\"\n",
    "data_align_path = r\"E:\\Fresh Desk and SR Reports\\dump\\Data Align List_newww.xlsx\"\n",
    "\n",
    "# --- Load data ---\n",
    "df_merged = pd.read_excel(output_path, sheet_name=0)  # main sheet\n",
    "data_align = pd.read_excel(data_align_path)  # external file with Name, Groups, Zone, ASM Name\n",
    "\n",
    "# --- Date column ---\n",
    "df_merged[\"Date\"] = pd.to_datetime(df_merged[\"last_active_at\"], dayfirst=True).dt.date\n",
    "df_merged[\"Date\"] = df_merged[\"Date\"].fillna(\"Not Login\")\n",
    "\n",
    "# --- Ageing column ---\n",
    "today_date = datetime.now().date()\n",
    "def ageing(x):\n",
    "    if isinstance(x, date):\n",
    "        return (today_date - x).days\n",
    "    return \"Not Logged In\"\n",
    "\n",
    "df_merged[\"Ageing\"] = df_merged[\"Date\"].apply(ageing)\n",
    "\n",
    "# --- Zone & ASM Name ---\n",
    "# First try match on Groups\n",
    "zone_map = data_align.set_index(\"Groups\")[\"Zone\"].to_dict()\n",
    "asm_map  = data_align.set_index(\"Groups\")[\"ASM Name\"].to_dict()\n",
    "\n",
    "df_merged[\"Zone\"] = df_merged[\"Groups\"].map(zone_map)\n",
    "df_merged[\"ASM Name\"] = df_merged[\"Groups\"].map(asm_map)\n",
    "\n",
    "# Fallback: if Zone/ASM still empty, try matching with Name\n",
    "name_zone_map = data_align.set_index(\"Name\")[\"Zone\"].to_dict()\n",
    "name_asm_map  = data_align.set_index(\"Name\")[\"ASM Name\"].to_dict()\n",
    "\n",
    "df_merged.loc[df_merged[\"Zone\"].isna(), \"Zone\"] = df_merged[\"contact.name\"].map(name_zone_map)\n",
    "df_merged.loc[df_merged[\"ASM Name\"].isna(), \"ASM Name\"] = df_merged[\"contact.name\"].map(name_asm_map)\n",
    "\n",
    "# Fill missing with '-'\n",
    "df_merged[\"Zone\"] = df_merged[\"Zone\"].fillna(\"-\")\n",
    "df_merged[\"ASM Name\"] = df_merged[\"ASM Name\"].fillna(\"-\")\n",
    "\n",
    "# --- Bucket column ---\n",
    "def bucket(x):\n",
    "    if isinstance(x, int):\n",
    "        if 0 <= x <= 3:\n",
    "            return \"0-3 Days\"\n",
    "        elif 4 <= x <= 7:\n",
    "            return \"4-7 Days\"\n",
    "        elif 8 <= x <= 15:\n",
    "            return \"8-15 Days\"\n",
    "        else:\n",
    "            return \">15 Days Above\"\n",
    "    return \"Not Logged In\"\n",
    "\n",
    "df_merged[\"Bucket\"] = df_merged[\"Ageing\"].apply(bucket)\n",
    "\n",
    "# --- Save back to Excel ---\n",
    "final_output = fr\"E:\\Fresh Desk and SR Reports\\dump\\Dealer Login Report Final - {today}.xlsx\"\n",
    "df_merged.to_excel(final_output, index=False)\n",
    "\n",
    "print(f\"✅ Final file saved at: {final_output}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d6e5797-4a51-43ca-9b1a-4e5f02a45473",
   "metadata": {},
   "source": [
    "# Step 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6e34057-b4fa-4bf0-9dd3-c8e5cdfeb671",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ✅ Change temp directory for current session\n",
    "new_temp = r\"E:\\new python temp\"\n",
    "os.makedirs(new_temp, exist_ok=True)\n",
    "os.environ[\"TMP\"] = new_temp\n",
    "os.environ[\"TEMP\"] = new_temp\n",
    "tempfile.tempdir = new_temp\n",
    "print(\"✅ Temp directory set to:\", tempfile.gettempdir())\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import openpyxl\n",
    "from openpyxl.styles import PatternFill, Font\n",
    "\n",
    "# --- Paths ---\n",
    "today = datetime.now().strftime(\"%d-%m-%Y\")\n",
    "final_output = fr\"E:\\Fresh Desk and SR Reports\\dump\\Dealer Login Report Final - {today}.xlsx\"\n",
    "\n",
    "# --- Load raw data ---\n",
    "df = pd.read_excel(final_output)\n",
    "\n",
    "# ✅ Ensure \"Zone\" exists and is clean\n",
    "if \"Zone\" not in df.columns:\n",
    "    raise ValueError(\"⚠️ 'Zone' column not found in the Excel file\")\n",
    "\n",
    "# Sometimes after merge, \"Zone\" may become multiple columns like ('Zone','Zone')\n",
    "# Force pick the correct one\n",
    "df[\"Zone\"] = df[\"Zone\"].astype(str).str.strip()\n",
    "\n",
    "# --- Create Pivot ---\n",
    "pivot = pd.pivot_table(\n",
    "    df,\n",
    "    index=\"Bucket\",\n",
    "    columns=\"Zone\",\n",
    "    values=\"contact.name\",   # ✅ use a real column for counting\n",
    "    aggfunc=\"count\",\n",
    "    margins=True,            # ✅ adds Grand Totals\n",
    "    margins_name=\"Grand Total\"\n",
    ").reset_index()\n",
    "\n",
    "# --- Save Raw + Summary sheets ---\n",
    "with pd.ExcelWriter(final_output, engine=\"openpyxl\", mode=\"w\") as writer:\n",
    "    df.to_excel(writer, sheet_name=\"Raw\", index=False)         # Raw data\n",
    "    pivot.to_excel(writer, sheet_name=\"Summary\", index=False)  # Pivot\n",
    "\n",
    "# --- Apply formatting to Summary sheet ---\n",
    "wb = openpyxl.load_workbook(final_output)\n",
    "ws = wb[\"Summary\"]\n",
    "\n",
    "# Header fill (dark background) & font (light/white)\n",
    "header_fill = PatternFill(start_color=\"1F4E78\", end_color=\"1F4E78\", fill_type=\"solid\")  # dark blue\n",
    "header_font = Font(color=\"FFFFFF\", bold=True)\n",
    "\n",
    "for cell in ws[1]:  # first row (headers)\n",
    "    cell.fill = header_fill\n",
    "    cell.font = header_font\n",
    "\n",
    "# Auto-adjust column widths\n",
    "for col in ws.columns:\n",
    "    max_length = 0\n",
    "    col_letter = col[0].column_letter\n",
    "    for cell in col:\n",
    "        try:\n",
    "            if cell.value:\n",
    "                max_length = max(max_length, len(str(cell.value)))\n",
    "        except:\n",
    "            pass\n",
    "    ws.column_dimensions[col_letter].width = max_length + 2\n",
    "\n",
    "# Save styled workbook\n",
    "wb.save(final_output)\n",
    "\n",
    "print(f\"✅ Final file with Pivot saved at: {final_output}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b13189e2-5424-4e27-9691-3b2620716749",
   "metadata": {},
   "source": [
    "# Step 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b286849b-d523-45de-af3a-9ac6b0948ed9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ✅ Change temp directory for current session\n",
    "new_temp = r\"E:\\new python temp\"\n",
    "os.makedirs(new_temp, exist_ok=True)\n",
    "os.environ[\"TMP\"] = new_temp\n",
    "os.environ[\"TEMP\"] = new_temp\n",
    "tempfile.tempdir = new_temp\n",
    "print(\"✅ Temp directory set to:\", tempfile.gettempdir())\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import openpyxl\n",
    "from openpyxl.styles import PatternFill, Font, Alignment\n",
    "\n",
    "# --- Paths ---\n",
    "today = datetime.now().strftime(\"%d-%m-%Y\")\n",
    "\n",
    "# Input file (unchanged)\n",
    "input_file = fr\"E:\\Fresh Desk and SR Reports\\dump\\Dealer Login Report Final - {today}.xlsx\"\n",
    "\n",
    "# Output file (new name with Summary)\n",
    "final_output = fr\"E:\\Fresh Desk and SR Reports\\dump\\Dealer Login Report (with Summary) - {today}.xlsx\"\n",
    "\n",
    "# --- Load raw data ---\n",
    "df = pd.read_excel(input_file)\n",
    "\n",
    "# ✅ Ensure \"Zone\" exists and is clean\n",
    "if \"Zone\" not in df.columns:\n",
    "    raise ValueError(\"⚠️ 'Zone' column not found in the Excel file\")\n",
    "\n",
    "# Ensure Zone is a flat string\n",
    "df[\"Zone\"] = df[\"Zone\"].astype(str).str.strip()\n",
    "\n",
    "# --- Create Pivot ---\n",
    "pivot = pd.pivot_table(\n",
    "    df,\n",
    "    index=\"Bucket\",\n",
    "    columns=\"Zone\",\n",
    "    values=\"contact.name\",   # use a real column for counting\n",
    "    aggfunc=\"count\",\n",
    "    margins=True,            # ✅ adds Grand Totals\n",
    "    margins_name=\"Grand Total\"\n",
    ").reset_index()\n",
    "\n",
    "# --- Save Raw + Summary sheets ---\n",
    "with pd.ExcelWriter(final_output, engine=\"openpyxl\", mode=\"w\") as writer:\n",
    "    df.to_excel(writer, sheet_name=\"Raw\", index=False)         # Raw data\n",
    "    pivot.to_excel(writer, sheet_name=\"Summary\", index=False)  # Pivot\n",
    "\n",
    "# --- Apply formatting to Summary sheet ---\n",
    "wb = openpyxl.load_workbook(final_output)\n",
    "ws = wb[\"Summary\"]\n",
    "\n",
    "# Header fill (dark background) & font (light/white)\n",
    "header_fill = PatternFill(start_color=\"1F4E78\", end_color=\"1F4E78\", fill_type=\"solid\")  # dark blue\n",
    "header_font = Font(color=\"FFFFFF\", bold=True)\n",
    "\n",
    "for cell in ws[1]:  # first row (headers)\n",
    "    cell.fill = header_fill\n",
    "    cell.font = header_font\n",
    "\n",
    "# Center align all cells\n",
    "center_alignment = Alignment(horizontal=\"center\", vertical=\"center\")\n",
    "for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=ws.max_column):\n",
    "    for cell in row:\n",
    "        cell.alignment = center_alignment\n",
    "\n",
    "# Highlight last row (Grand Total)\n",
    "last_row = ws.max_row\n",
    "total_fill = PatternFill(start_color=\"1F4E78\", end_color=\"1F4E78\", fill_type=\"solid\")  # gold\n",
    "total_font = Font(color=\"FFFFFF\", bold=True)\n",
    "\n",
    "for cell in ws[last_row]:\n",
    "    cell.fill = total_fill\n",
    "    cell.font = total_font\n",
    "    cell.alignment = center_alignment\n",
    "\n",
    "# Auto-adjust column widths\n",
    "for col in ws.columns:\n",
    "    max_length = 0\n",
    "    col_letter = col[0].column_letter\n",
    "    for cell in col:\n",
    "        try:\n",
    "            if cell.value:\n",
    "                max_length = max(max_length, len(str(cell.value)))\n",
    "        except:\n",
    "            pass\n",
    "    ws.column_dimensions[col_letter].width = max_length + 2\n",
    "\n",
    "# Save styled workbook\n",
    "wb.save(final_output)\n",
    "\n",
    "print(f\"✅ Final file with Pivot (centered + Grand Total highlighted) saved at: {final_output}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0648cba-738f-4aba-8b08-48e32b9f3317",
   "metadata": {},
   "source": [
    "# Step 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ec37199-a8e9-47c8-95e3-e4118617cc2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ✅ Change temp directory for current session\n",
    "new_temp = r\"E:\\new python temp\"\n",
    "os.makedirs(new_temp, exist_ok=True)\n",
    "os.environ[\"TMP\"] = new_temp\n",
    "os.environ[\"TEMP\"] = new_temp\n",
    "tempfile.tempdir = new_temp\n",
    "print(\"✅ Temp directory set to:\", tempfile.gettempdir())\n",
    "\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from io import BytesIO\n",
    "import win32com.client as win32\n",
    "from datetime import datetime\n",
    "import base64\n",
    "\n",
    "# --- Paths ---\n",
    "today = datetime.now().strftime(\"%d-%m-%Y\")\n",
    "final_output = fr\"E:\\Fresh Desk and SR Reports\\dump\\Dealer Login Report (with Summary) - {today}.xlsx\"\n",
    "\n",
    "# --- Load Pivot (Summary) sheet ---\n",
    "df = pd.read_excel(final_output, sheet_name=\"Summary\").fillna(0)\n",
    "\n",
    "# Convert float columns that are whole numbers to int\n",
    "for col in df.columns:\n",
    "    if pd.api.types.is_float_dtype(df[col]):\n",
    "        df[col] = df[col].apply(lambda x: int(x) if x == int(x) else x)\n",
    "\n",
    "# --- Plot table as image ---\n",
    "fig, ax = plt.subplots(figsize=(12, max(4, 0.5*len(df))))\n",
    "ax.axis('off')\n",
    "tbl = ax.table(\n",
    "    cellText=df.values,\n",
    "    colLabels=df.columns,\n",
    "    cellLoc='center',\n",
    "    loc='center'\n",
    ")\n",
    "\n",
    "tbl.auto_set_font_size(False)\n",
    "tbl.set_fontsize(10)\n",
    "tbl.auto_set_column_width(col=list(range(len(df.columns))))\n",
    "\n",
    "# --- Format header row ---\n",
    "for col in range(len(df.columns)):\n",
    "    cell = tbl[(0, col)]\n",
    "    cell.set_facecolor('#1F4E78')  # dark blue\n",
    "    cell.get_text().set_color('white')\n",
    "    cell.get_text().set_weight('bold')\n",
    "\n",
    "# --- Format last row (Grand Total) ---\n",
    "last_row = len(df) - 0\n",
    "for col in range(len(df.columns)):\n",
    "    cell = tbl[(last_row, col)]\n",
    "    cell.set_facecolor('#1F4E78')  # dark blue\n",
    "    cell.get_text().set_color('white')\n",
    "    cell.get_text().set_weight('bold')\n",
    "\n",
    "# --- Save table to BytesIO buffer with transparent background ---\n",
    "img_buffer = BytesIO()\n",
    "plt.savefig(img_buffer, format='png', bbox_inches='tight', transparent=True)\n",
    "plt.close(fig)\n",
    "img_buffer.seek(0)\n",
    "\n",
    "# --- Send Outlook mail ---\n",
    "outlook = win32.Dispatch('Outlook.Application')\n",
    "mail = outlook.CreateItem(0)\n",
    "mail.SentOnBehalfOfName = 'Dev.bhatia@rattanindia.com'\n",
    "mail.To = 'biswaroop.ghosh@revoltmotors.com; sakthi.m@revoltmotors.com; p.deshpande@revoltmotors.com; nirajkumar.vaghela@revoltmotors.com; raju.pathak@revoltmotors.com; ajay.pal@revoltmotors.com; jagdish.sharma@revoltmotors.com'\n",
    "mail.CC = 'shivam.choudhary@rattanIndia.com; rajat.kapoor@rattanIndia.com; ankit.jain@revoltmotors.com; manan.arora@rattanIndia.com; nithin.kumar@revoltmotors.com; ritu.jaiswal@revoltmotors.com'\n",
    "#mail.To = 'Dev.bhatia@rattanIndia.com'\n",
    "#mail.CC = 'Dev.bhatia@rattanIndia.com'\n",
    "mail.Subject = f\"Dealer Login Report - {today}\"\n",
    "\n",
    "# Embed image in email body\n",
    "img_base64 = base64.b64encode(img_buffer.read()).decode()\n",
    "mail.HTMLBody = f\"\"\"\n",
    "<p>Dear Team,</p>\n",
    "<p>Please find below the Dealer Login Report Summary as of <b>{today}</b>:</p>\n",
    "<p><img src=\"data:image/png;base64,{img_base64}\"></p>\n",
    "<p>Thanks & Regards,<br></p>\n",
    "\"\"\"\n",
    "\n",
    "# Optional: attach Excel file\n",
    "mail.Attachments.Add(final_output)\n",
    "\n",
    "# Send without opening Outlook\n",
    "mail.Send()\n",
    "print(\"📧 Mail with table image sent successfully!\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
